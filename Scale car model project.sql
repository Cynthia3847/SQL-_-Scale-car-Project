								-- SCALE CAR MODEL PROJECT--

/*The aim of this project is to employ MySQL for the purpose of analyzing the database containing 
scale car models, allowing us to effectively address the following questions:

Question 1: Which products should we order more of or less of?
Question 2: How should we tailor marketing and communication strategies to customer behaviors?
Question 4: How much can we spend on acquiring new customers?


-- DATA DISCRIPTION--
 The scale model cars database schema contains eight tables:

Customers: customer data
Employees: all employee information
Offices: sales office information
Orders: customers' sales orders
OrderDetails: sales order line for each sales order
Payments: customers' payment records
Products: a list of scale model cars
ProductLines: a list of product line categories */

-- EXPLORING THE TABLES--
-- Write a query to display all tables, no. of attributes per table and no.rows per table.

SELECT "Customers" AS table_name , COUNT(*) AS number_of_row, "13" AS number_of_attributes
  FROM customers
 UNION ALL
SELECT "Products" AS table_name , COUNT(*) AS number_of_row ,  "9" AS number_of_attributes
  FROM products
 UNION ALL
SELECT "ProductLines" AS table_name , COUNT(*) AS number_of_row,  "4" AS number_of_attributes
  FROM productlines
 UNION ALL
SELECT "Orders" AS table_name , COUNT(*) AS number_of_row,  "7" AS number_of_attributes
  FROM orders
 UNION ALL
SELECT "OrderDetails" AS table_name , COUNT(*) AS number_of_row, "5" AS number_of_attributes
  FROM orderdetails
 UNION ALL
SELECT "Payments" AS table_name , COUNT(*) AS number_of_row, "4" AS number_of_attributes
  FROM payments
 UNION ALL
SELECT "Employees" AS table_name , COUNT(*) AS number_of_row, "8" AS number_of_attributes
  FROM employees
 UNION ALL
SELECT "Offices" AS table_name , COUNT(*) AS number_of_row, "9" AS number_of_attributes
  FROM offices;
  
  
 
/*Data tables needed: orderdetails , products
low stock = SUM(quantityOrdered) / quantityInStock
productperformance = SUM(quantityOrdered * priceEach)
*/

/* Question 1: Which Products Should We Order More of or Less of?
-- Write a query to compute the low stock for each product using a correlated subquery.
-- Write a query to combine low stock and product performance queries using CTE to display priority products for restocking*/


-- Compute the low stock for each product using JOIN and correlated subquery.
SELECT p.productCode,
	   SUM(od.quantityOrdered * od.priceEach) AS product_performance,
	   ROUND(SUM(od.quantityOrdered) / p.quantityInStock,2) AS low_stock
  FROM products AS p
  JOIN orderdetails AS od
    ON p.productCode = od.productCode
 GROUP BY p.productCode
 ORDER BY low_stock DESC
 LIMIT 10;
 
 
 -- Write a query to combine low stock and product performance queries using CTE to display priority products for restocking
    
    WITH
   performance AS (
    SELECT  productCode, 
	        SUM(quantityOrdered) * 1.0 AS qtyorder,
	        SUM(quantityOrdered * priceEach) AS prod_performance
     FROM   orderdetails
	 GROUP  BY productCode 
	),
	lowstock AS (
    SELECT p.productCode,
		   p.productName, 
		   p.productLine,
           ROUND(SUM(performance.qtyorder * 1.0) / p.quantityInstock, 2) AS low_stock
     FROM  products  AS p
	 JOIN  performance
	   ON  p.productCode = performance.productCode
    GROUP  BY p.productCode 	  
    ORDER  BY low_stock 
    LIMIT  10
    )
	  
  SELECT lowstock.productCode,
		 lowstock.productLine,
		 lowstock.productName,
		 performance.prod_performance, 
		 lowstock.low_stock 
    FROM lowstock
	JOIN performance
	  ON lowstock.productCode = performance.productCode
   ORDER BY performance.prod_performance DESC;
   
/*Question 2: How Should We Match Marketing and Communication Strategies to Customer Behavior? 
  --Compute, for each customer, the profit, which is the sum of quantityOrdered multiplied by priceEach minus buyPrice
: SUM(quantityOrdered * (priceEach - buyPrice))*/
  -- Write a query to display customers and profit generated by them by joining products, orderdetails and orders tables
  -- Write a query to find top 10 customers in terms of profit generation by using JOINS
  -- Write a query to find top 10 customers in terms of profit generation by using CTE
  -- Least engaged : Write a query to find bottom 10 customers in terms of profit generation using JOINS*/
  
  
-- Write a query to display customers and profit generated by them by joining products, orderdetails and orders tables
WITH customer AS (
  SELECT orderNumber, customerNumber
  FROM orders
),
orders AS (
  SELECT
    od.orderNumber,
    od.quantityOrdered,
    od.productCode,
    od.priceEach,
    customer.customerNumber
  FROM orderdetails AS od
  JOIN customer ON customer.orderNumber = od.orderNumber
),
prod AS (
  SELECT
    p.productCode,
    p.productName,
    p.productLine,
    ROUND((orders.quantityOrdered * orders.priceEach) - p.buyPrice, 2) AS profit
  FROM products AS p
  JOIN orders ON orders.productCode = p.productCode
)
SELECT
  prod.productCode,
  prod.productName,
  prod.productLine,
  prod.profit,
  orders.customerNumber,
  orders.quantityOrdered
FROM prod
JOIN orders ON orders.productCode = prod.productCode
ORDER BY prod.profit DESC;
  
 -- Write a query to find top 10 customers in terms of profit generation by using JOINS
 SELECT
  c.contactLastName,
  c.contactFirstName,
  c.city,
  c.country,
  o.customerNumber,
  SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS profit
FROM products p
JOIN orderdetails od ON p.productCode = od.productCode
JOIN orders o ON o.orderNumber = od.orderNumber
JOIN customers c ON o.customerNumber = c.customerNumber
GROUP BY o.customerNumber
ORDER BY profit DESC
LIMIT 10;
 
-- Write a query to find top 10 customers in terms of profit generation by using CTE
  
  WITH
  profit_gen_table AS (
    SELECT os.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS prof_gen  
      FROM products pr
	  JOIN orderdetails od
	    ON pr.productCode = od.productCode
	  JOIN orders os
	    ON od.orderNumber = os.orderNumber
     GROUP BY os.customerNumber
  )
	SELECT contactLastName, contactFirstName, city, country, pg.prof_gen
	  FROM customers cust
	  JOIN profit_gen_table pg
	    ON pg.customerNumber = cust.customerNumber
	 ORDER BY pg.prof_gen DESC
	 LIMIT 10;
	 
 -- Least engaged : Write a query to find bottom 10 customers in terms of profit generation using JOINS
 
 SELECT c.contactLastName,c.contactFirstName, c.city,c.country,
		o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
  FROM products p
  JOIN orderdetails od
    ON p.productCode = od.productCode
  JOIN orders o
    ON o.orderNumber = od.orderNumber
  JOIN customers c
    ON o.customerNumber = c.customerNumber
 GROUP BY o.customerNumber
 ORDER BY profit
 LIMIT 10;
 
 
 
/* Question 3: How Much Can We Spend on Acquiring New Customers?

-- let's find the number of new customers arriving each month. 
-- That way we can check if it's worth spending money on acquiring new customers*/
 
 WITH pmt_yr_mo_table AS (
    SELECT 
        p.paymentDate,
        p.customerNumber,
        CAST(SUBSTR(p.paymentDate, 1, 4) AS SIGNED) * 100 + CAST(SUBSTR(p.paymentDate, 6, 2) AS SIGNED) AS `year_month`,
        p.amount
    FROM payments AS p
), 
cust_by_mo_table AS (
    SELECT 
        p1.`year_month`, 
        COUNT(*) AS no_of_customers,
        SUM(p1.amount) AS total
    FROM pmt_yr_mo_table AS p1
    GROUP BY p1.`year_month`
), 
new_cust_by_mo_table AS (
    SELECT 
        p1.`year_month`,
        COUNT(*) AS no_of_new_customers,
        SUM(p1.amount) AS new_customer_total,
        c.no_of_customers,
        c.total
    FROM pmt_yr_mo_table AS p1
    JOIN cust_by_mo_table AS c ON c.`year_month` = p1.`year_month`
    WHERE p1.customerNumber NOT IN (
        SELECT p2.customerNumber
        FROM pmt_yr_mo_table AS p2
        WHERE p2.`year_month` < p1.`year_month`
    )
    GROUP BY p1.`year_month`, c.no_of_customers, c.total
)
SELECT 
    `year_month`, 
    ROUND(no_of_new_customers * 100.0 / no_of_customers, 1) AS no_of_new_customers_percentage,
    ROUND(new_customer_total * 100.0 / total, 1) AS new_customer_total_percentage
FROM new_cust_by_mo_table;

   
   
 -- compute the Customer Lifetime Value (LTV), which represents the average amount of money a customer generates
  
  WITH
  profit_gen_table AS (
	SELECT os.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS prof_gen  
      FROM products pr
	  JOIN orderdetails od
	    ON pr.productCode = od.productCode
	  JOIN orders os
	    ON od.orderNumber = os.orderNumber
     GROUP BY os.customerNumber
  )
   SELECT ROUND(AVG(pg.prof_gen),2) AS Customer_Lifetime_Value
     FROM profit_gen_table pg;
   
  
  
  /* 
  
  -------------- SUMMARY -------------
 
  Question 1: Which products should we order more of or less of?
  
    Answer 1:Upon analyzing the query results that compare low stock with product performance, 
             it is evident that 60% of the cars belong to the 'Classic Cars' product line. 
			 These cars exhibit a high level of product performance and sell consistently. 
			 Therefore, it is recommended that we prioritize restocking these cars on a regular basis.
 
  Question 2: How should we tailor marketing and communication strategies to customer behaviors?
  
    Answer 2: After examining the query results regarding the top and bottom customers in relation to profit generation, 
              it is evident that we should implement loyalty rewards and priority services for our top customers in order to maintain their loyalty. 
              Additionally, for the bottom customers, it would be beneficial to actively seek their feedback to gain a deeper understanding of their preferences, anticipated pricing, and their expectations regarding discounts and offers. 
			  By doing so, we can enhance our sales and cater to their needs more effectively.
 
  Question 3: How much can we spend on acquiring new customers?
  
  Answer 3: As evident from the data, there has been a consistent decline in the number of clients since 2003, reaching its lowest point in 2004. 
              Notably, the absence of the year 2005 in the table indicates that no new customers have been acquired since September 2004. 
              Given this information, it is logical to allocate resources towards acquiring new customers.
     
              The average customer lifetime value of our store is $39,040, meaning we profit that amount from each new customer. 
              This allows us to predict our spending on customer acquisition while maintaining or increasing our profits.
  
  */


 
